<template>
  <BasicModal
    v-bind="$attrs"
    @register="registerModal"
    :title="modalTitle"
    :width="800"
    @ok="handleSubmit"
    :okText="'导入'"
    :cancelText="'取消'"
  >
    <BasicForm @register="registerForm">
      <template #fileName="{ model, field }">
        <div class="flex items-center">
          <Input
            v-model:value="model[field]"
            placeholder="请选择文件"
            :disabled="true"
            class="flex-1"
          />
          <Button
            type="primary"
            class="ml-2"
            @click="handleSelectFile"
            :icon="h(PlusOutlined)"
          />
        </div>
      </template>

      <template #fileList>
        <div class="file-list-container">
          <Table
            :columns="fileColumns"
            :dataSource="fileList"
            :pagination="false"
            :scroll="{ y: 200 }"
            size="small"
          >
            <template #bodyCell="{ column, record }">
              <template v-if="column.key === 'action'">
                <Button type="link" danger size="small" @click="handleRemoveFile(record)">
                  Remove
                </Button>
              </template>
              <template v-else-if="column.key === 'size'">
                {{ formatFileSize(record.size) }}
              </template>
            </template>
          </Table>
          <Upload
            v-show="false"
            ref="uploadRef"
            :showUploadList="false"
            :beforeUpload="beforeUpload"
            :customRequest="customUpload"
            accept=".xlsx,.xls"
          >
            <Button ref="uploadBtnRef">选择文件</Button>
          </Upload>
        </div>
      </template>
    </BasicForm>
  </BasicModal>
</template>

<script lang="ts" setup>
import { ref, h, reactive } from 'vue';
import { BasicModal, useModalInner } from '/@/components/Modal';
import { BasicForm, useForm } from '/@/components/Form';
import { Input, Button, Upload, Table, message } from 'ant-design-vue';
import { PlusOutlined } from '@ant-design/icons-vue';
import type { UploadFile } from 'ant-design-vue/es/upload/interface';

// 定义表单数据接口
interface FormData {
  fileName: string;
  assetId: string | undefined;
  ownerId: string | undefined;
  repairDeadline: string | undefined;
  isPeriodTest: string | undefined;
  description: string;
}

// 定义文件列表项接口
interface FileItem {
  uid: string;
  name: string;
  size: number;
  file: File;
}

const emit = defineEmits(['success', 'register']);

const modalTitle = ref('批量导入');
const uploadRef = ref();
const uploadBtnRef = ref();
const fileList = ref<FileItem[]>([]);
const formData = reactive<FormData>({
  fileName: '',
  assetId: undefined,
  ownerId: undefined,
  repairDeadline: undefined,
  isPeriodTest: undefined,
  description: '',
});

// 文件列表表格列配置
const fileColumns = [
  {
    title: '文件名',
    dataIndex: 'name',
    key: 'name',
    width: '60%',
  },
  {
    title: '大小',
    dataIndex: 'size',
    key: 'size',
    width: '20%',
  },
  {
    title: '操作',
    key: 'action',
    width: '20%',
  },
];

// 表单配置
const [registerForm, { validate, resetFields, setFieldsValue }] = useForm({
  labelWidth: 100,
  schemas: [
    {
      field: 'fileName',
      label: '文件名',
      component: 'Input',
      slot: 'fileName',
      required: true,
      colProps: { span: 24 },
    },
    {
      field: 'assetId',
      label: '应用资产',
      component: 'Select',
      componentProps: {
        placeholder: '请选择资产',
        options: [
          // 这里添加资产选项
        ],
      },
      colProps: { span: 24 },
    },
    {
      field: 'ownerId',
      label: '属主',
      component: 'Select',
      componentProps: {
        placeholder: '请选择属主',
        options: [
          // 这里添加属主选项
        ],
      },
      colProps: { span: 24 },
    },
    {
      field: 'repairDeadline',
      label: '修复期限',
      component: 'DatePicker',
      componentProps: {
        style: { width: '100%' },
        format: 'YYYY-MM-DD',
        valueFormat: 'YYYY-MM-DD',
      },
      colProps: { span: 24 },
    },
    {
      field: 'isPeriodTest',
      label: '是否周期测试',
      component: 'Select',
      componentProps: {
        placeholder: '请选择',
        options: [
          { label: '是', value: '1' },
          { label: '否', value: '0' },
        ],
      },
      colProps: { span: 24 },
    },
    {
      field: 'description',
      label: '描述',
      component: 'InputTextArea',
      componentProps: {
        rows: 4,
        placeholder: '请输入描述',
      },
      colProps: { span: 24 },
    },
    {
      field: 'fileList',
      label: '附件列表',
      component: 'Input',
      slot: 'fileList',
      colProps: { span: 24 },
    },
  ],
  showActionButtonGroup: false,
});

const [registerModal, { setModalProps, closeModal }] = useModalInner(async (data) => {
  resetFields();
  setModalProps({ confirmLoading: false });
  fileList.value = [];
  
  // 如果有传入数据，设置表单值
  if (data) {
    setFieldsValue({
      ...data,
    });
  }
});

// 处理选择文件按钮点击
const handleSelectFile = () => {
  uploadBtnRef.value?.$el?.click();
};

// 文件上传前的处理
const beforeUpload = (file: File) => {
  const isExcel = file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
    || file.type === 'application/vnd.ms-excel';
  
  if (!isExcel) {
    message.error('只能上传Excel文件！');
    return false;
  }
  
  const isLt10M = file.size / 1024 / 1024 < 10;
  if (!isLt10M) {
    message.error('文件大小不能超过10MB！');
    return false;
  }
  
  return false; // 阻止自动上传
};

// 自定义上传处理
const customUpload = ({ file }: any) => {
  // 创建文件对象
  const fileItem: FileItem = {
    uid: Date.now().toString(),
    name: file.name,
    size: file.size,
    file: file,
  };
  
  // 替换文件列表（只保留一个文件）
  fileList.value = [fileItem];
  
  // 设置文件名到表单
  setFieldsValue({
    fileName: file.name,
  });
  
  return false;
};

// 移除文件
const handleRemoveFile = (record: FileItem) => {
  fileList.value = fileList.value.filter(item => item.uid !== record.uid);
  
  // 清空文件名
  setFieldsValue({
    fileName: '',
  });
};

// 格式化文件大小
const formatFileSize = (size: number) => {
  if (size < 1024) {
    return size + 'B';
  } else if (size < 1024 * 1024) {
    return (size / 1024).toFixed(2) + 'KB';
  } else {
    return (size / 1024 / 1024).toFixed(2) + 'MB';
  }
};

// 提交处理
const handleSubmit = async () => {
  try {
    const values = await validate();
    
    if (fileList.value.length === 0) {
      message.error('请上传文件！');
      return;
    }
    
    setModalProps({ confirmLoading: true });
    
    // 构建提交数据
    const formData = new FormData();
    formData.append('file', fileList.value[0].file);
    formData.append('fileName', values.fileName);
    formData.append('assetId', values.assetId || '');
    formData.append('ownerId', values.ownerId || '');
    formData.append('repairDeadline', values.repairDeadline || '');
    formData.append('isPeriodTest', values.isPeriodTest || '');
    formData.append('description', values.description || '');
    
    // TODO: 调用API上传
    // const result = await batchImportApi(formData);
    
    // 模拟上传成功
    setTimeout(() => {
      message.success('批量导入成功！');
      closeModal();
      emit('success');
      setModalProps({ confirmLoading: false });
    }, 1500);
    
  } catch (error) {
    setModalProps({ confirmLoading: false });
    console.error('提交失败:', error);
  }
};
</script>

<style lang="less" scoped>
.file-list-container {
  border: 1px solid #d9d9d9;
  border-radius: 2px;
  padding: 8px;
  min-height: 150px;
  
  :deep(.ant-table) {
    .ant-table-tbody > tr > td {
      padding: 4px 8px;
    }
  }
}
</style>