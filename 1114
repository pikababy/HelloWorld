我来帮您使用 Ant Design Vue 和 Vue 3 创建一个"新增主机信息"的弹框组件。

## 组件文件：`AddHostModal.vue`

```vue
<template>
  <a-modal
    v-model:open="modalVisible"
    title="新增主机信息"
    width="800px"
    :footer="null"
    centered
    @cancel="handleCancel"
  >
    <a-form
      ref="formRef"
      :model="formState"
      :rules="rules"
      :label-col="{ span: 6 }"
      :wrapper-col="{ span: 16 }"
      autocomplete="off"
    >
      <!-- 主机名 -->
      <a-form-item
        label="主机名"
        name="hostname"
        :required="true"
      >
        <a-input
          v-model:value="formState.hostname"
          placeholder="请输入主机名"
          size="large"
        />
      </a-form-item>

      <!-- IP -->
      <a-form-item
        label="IP"
        name="ip"
        :required="true"
      >
        <a-input
          v-model:value="formState.ip"
          placeholder="请输入IP地址"
          size="large"
        />
      </a-form-item>

      <!-- 应用资产名称 -->
      <a-form-item
        label="应用资产名称"
        name="assetName"
        :required="true"
      >
        <a-select
          v-model:value="formState.assetName"
          placeholder="请选择应用资产名称"
          size="large"
          allow-clear
        >
          <a-select-option 
            v-for="asset in assetOptions" 
            :key="asset.value"
            :value="asset.value"
          >
            {{ asset.label }}
          </a-select-option>
        </a-select>
      </a-form-item>

      <!-- 品牌 -->
      <a-form-item
        label="品牌"
        name="brand"
        :required="true"
      >
        <a-input
          v-model:value="formState.brand"
          placeholder="请输入品牌"
          size="large"
        />
      </a-form-item>

      <!-- 规格型号 -->
      <a-form-item
        label="规格型号"
        name="model"
        :required="true"
      >
        <a-input
          v-model:value="formState.model"
          placeholder="请输入规格型号"
          size="large"
        />
      </a-form-item>

      <!-- 运维负责人 -->
      <a-form-item
        label="运维负责人"
        name="maintainer"
        :required="true"
      >
        <a-select
          v-model:value="formState.maintainer"
          placeholder="--可多选--"
          mode="multiple"
          size="large"
          allow-clear
        >
          <a-select-option 
            v-for="person in maintainerOptions" 
            :key="person.value"
            :value="person.value"
          >
            {{ person.label }}
          </a-select-option>
        </a-select>
      </a-form-item>

      <!-- 类别名称 -->
      <a-form-item
        label="类别名称"
        name="category"
        :required="true"
      >
        <a-select
          v-model:value="formState.category"
          placeholder="请选择类别名称"
          size="large"
          allow-clear
        >
          <a-select-option 
            v-for="cat in categoryOptions" 
            :key="cat.value"
            :value="cat.value"
          >
            {{ cat.label }}
          </a-select-option>
        </a-select>
      </a-form-item>

      <!-- 操作系统发行版本 -->
      <a-form-item
        label="操作系统发行版本"
        name="osVersion"
      >
        <a-input
          v-model:value="formState.osVersion"
          placeholder="请输入操作系统发行版本"
          size="large"
        />
      </a-form-item>

      <!-- 网卡数量 -->
      <a-form-item
        label="网卡数量"
        name="networkCardCount"
      >
        <a-input-number
          v-model:value="formState.networkCardCount"
          placeholder="请输入网卡数量"
          :min="0"
          :precision="0"
          size="large"
          style="width: 100%"
        />
      </a-form-item>

      <!-- 底部按钮 -->
      <a-form-item :wrapper-col="{ offset: 6, span: 16 }">
        <div class="form-buttons">
          <a-button @click="handleCancel" size="large">
            <CloseOutlined /> 取消
          </a-button>
          <a-button 
            type="primary" 
            @click="handleSave" 
            size="large"
            :loading="saveLoading"
          >
            <SaveOutlined /> 保存
          </a-button>
        </div>
      </a-form-item>
    </a-form>
  </a-modal>
</template>

<script setup>
import { ref, reactive, computed, watch } from 'vue';
import { SaveOutlined, CloseOutlined } from '@ant-design/icons-vue';
import { message } from 'ant-design-vue';

// 定义 props
const props = defineProps({
  // 控制弹框显示
  visible: {
    type: Boolean,
    default: false
  },
  // 应用资产选项
  assetOptions: {
    type: Array,
    default: () => [
      { value: 'asset1', label: '应用资产1' },
      { value: 'asset2', label: '应用资产2' },
      { value: 'asset3', label: '应用资产3' }
    ]
  },
  // 运维负责人选项
  maintainerOptions: {
    type: Array,
    default: () => [
      { value: 'user1', label: '张三' },
      { value: 'user2', label: '李四' },
      { value: 'user3', label: '王五' },
      { value: 'user4', label: '赵六' }
    ]
  },
  // 类别选项
  categoryOptions: {
    type: Array,
    default: () => [
      { value: 'server', label: '服务器' },
      { value: 'storage', label: '存储设备' },
      { value: 'network', label: '网络设备' },
      { value: 'security', label: '安全设备' }
    ]
  },
  // 保存按钮loading状态
  saveLoading: {
    type: Boolean,
    default: false
  }
});

// 定义 emits
const emit = defineEmits(['update:visible', 'save', 'cancel']);

// 计算属性：控制弹框显示
const modalVisible = computed({
  get: () => props.visible,
  set: (value) => emit('update:visible', value)
});

// 表单引用
const formRef = ref();

// 表单数据
const formState = reactive({
  hostname: '',
  ip: '',
  assetName: undefined,
  brand: '',
  model: '',
  maintainer: [],
  category: undefined,
  osVersion: '',
  networkCardCount: undefined
});

// IP地址验证规则
const validateIP = (rule, value) => {
  if (!value) {
    return Promise.reject('请输入IP地址');
  }
  const ipPattern = /^(\d{1,3}\.){3}\d{1,3}$/;
  if (!ipPattern.test(value)) {
    return Promise.reject('请输入正确的IP地址格式');
  }
  const parts = value.split('.');
  for (const part of parts) {
    if (parseInt(part) > 255) {
      return Promise.reject('IP地址每段数字不能超过255');
    }
  }
  return Promise.resolve();
};

// 表单验证规则
const rules = {
  hostname: [
    { required: true, message: '请输入主机名', trigger: 'blur' },
    { min: 2, max: 50, message: '主机名长度应在2-50个字符之间', trigger: 'blur' }
  ],
  ip: [
    { required: true, validator: validateIP, trigger: 'blur' }
  ],
  assetName: [
    { required: true, message: '请选择应用资产名称', trigger: 'change' }
  ],
  brand: [
    { required: true, message: '请输入品牌', trigger: 'blur' },
    { max: 30, message: '品牌名称不能超过30个字符', trigger: 'blur' }
  ],
  model: [
    { required: true, message: '请输入规格型号', trigger: 'blur' },
    { max: 50, message: '规格型号不能超过50个字符', trigger: 'blur' }
  ],
  maintainer: [
    { required: true, message: '请选择运维负责人', trigger: 'change', type: 'array' }
  ],
  category: [
    { required: true, message: '请选择类别名称', trigger: 'change' }
  ],
  osVersion: [
    { max: 50, message: '操作系统版本不能超过50个字符', trigger: 'blur' }
  ],
  networkCardCount: [
    { type: 'number', min: 0, max: 100, message: '网卡数量应在0-100之间', trigger: 'blur' }
  ]
};

// 取消操作
const handleCancel = () => {
  modalVisible.value = false;
  formRef.value?.resetFields();
  emit('cancel');
};

// 保存操作
const handleSave = async () => {
  try {
    // 验证表单
    await formRef.value.validateFields();
    
    // 触发保存事件，传递表单数据
    emit('save', { ...formState });
    
  } catch (error) {
    // 验证失败，表单会自动显示错误信息
    console.log('Validation failed:', error);
  }
};

// 监听 visible 变化，重置表单
watch(modalVisible, (newVal) => {
  if (!newVal) {
    formRef.value?.resetFields();
  }
});

// 暴露方法给父组件
defineExpose({
  resetForm: () => {
    formRef.value?.resetFields();
  },
  getFormData: () => {
    return { ...formState };
  },
  setFormData: (data) => {
    Object.assign(formState, data);
  }
});
</script>

<style scoped>
/* 表单按钮样式 */
.form-buttons {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  padding-top: 12px;
}

.form-buttons .ant-btn {
  min-width: 100px;
}

/* 必填标记样式 */
:deep(.ant-form-item-required::before) {
  display: inline-block;
  margin-right: 4px;
  color: #ff4d4f;
  font-size: 14px;
  font-family: SimSun, sans-serif;
  line-height: 1;
  content: '*';
}

/* 表单项样式调整 */
:deep(.ant-form-item) {
  margin-bottom: 24px;
}

:deep(.ant-form-item-label > label) {
  font-size: 14px;
  color: rgba(0, 0, 0, 0.85);
}

/* 输入框样式 */
:deep(.ant-input),
:deep(.ant-select-selector),
:deep(.ant-input-number) {
  border-radius: 4px;
}

/* 错误提示样式 */
:deep(.ant-form-item-has-error .ant-input),
:deep(.ant-form-item-has-error .ant-select-selector),
:deep(.ant-form-item-has-error .ant-input-number) {
  border-color: #ff4d4f !important;
}

:deep(.ant-form-item-explain-error) {
  font-size: 14px;
}

/* 弹框样式 */
:deep(.ant-modal-header) {
  border-bottom: 1px solid #f0f0f0;
}

:deep(.ant-modal-title) {
  font-size: 18px;
  font-weight: 500;
}

:deep(.ant-modal-body) {
  padding: 24px;
  max-height: calc(100vh - 200px);
  overflow-y: auto;
}
</style>
```

## 使用示例：`App.vue`

```vue
<template>
  <div class="container">
    <!-- 触发按钮 -->
    <a-button type="primary" @click="openModal">新增主机信息</a-button>

    <!-- 使用新增主机信息弹框组件 -->
    <AddHostModal
      v-model:visible="modalVisible"
      :asset-options="assetList"
      :maintainer-options="maintainerList"
      :category-options="categoryList"
      :save-loading="loading"
      @save="handleSave"
      @cancel="handleCancel"
    />
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { message } from 'ant-design-vue';
import AddHostModal from './components/AddHostModal.vue';

// 控制弹框显示
const modalVisible = ref(false);
const loading = ref(false);

// 应用资产列表
const assetList = ref([
  { value: 'oa_system', label: 'OA办公系统' },
  { value: 'erp_system', label: 'ERP系统' },
  { value: 'crm_system', label: 'CRM系统' },
  { value: 'mes_system', label: 'MES系统' }
]);

// 运维负责人列表
const maintainerList = ref([
  { value: 'zhangsan', label: '张三' },
  { value: 'lisi', label: '李四' },
  { value: 'wangwu', label: '王五' },
  { value: 'zhaoliu', label: '赵六' },
  { value: 'qianqi', label: '钱七' }
]);

// 类别列表
const categoryList = ref([
  { value: 'physical_server', label: '物理服务器' },
  { value: 'virtual_server', label: '虚拟服务器' },
  { value: 'cloud_server', label: '云服务器' },
  { value: 'storage_device', label: '存储设备' },
  { value: 'network_device', label: '网络设备' }
]);

// 打开弹框
const openModal = () => {
  modalVisible.value = true;
};

// 处理保存事件
const handleSave = async (formData) => {
  console.log('保存的数据：', formData);
  
  // 模拟异步保存操作
  loading.value = true;
  
  try {
    // 这里可以调用API保存数据
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    message.success('主机信息保存成功！');
    modalVisible.value = false;
  } catch (error) {
    message.error('保存失败，请重试');
  } finally {
    loading.value = false;
  }
};

// 处理取消事件
const handleCancel = () => {
  console.log('用户取消了操作');
};
</script>

<style scoped>
.container {
  padding: 50px;
}
</style>
```

## 组件特点：

1. **完整的表单验证**：
   - 必填字段验证
   - IP地址格式验证
   - 字符长度限制
   - 数字范围验证

2. **灵活的配置**：
   - 支持自定义下拉选项
   - 支持多选（运维负责人）
   - 可配置保存loading状态

3. **良好的用户体验**：
   - 清晰的必填标记
   - 友好的错误提示
   - 表单重置功能

4. **组件化设计**：
   - 独立的组件文件
   - 清晰的props和events
   - 可复用性强

这个组件完整还原了图片中的新增主机信息弹框，包括所有的表单项和验证规则。