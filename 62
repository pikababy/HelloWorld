<template>
  <div class="role-selector-container">
    <!-- 页面标题 -->
    <div class="page-header">
      <h2>待办队列</h2>
    </div>

    <!-- 角色选择标签 -->
    <div class="role-tabs-wrapper">
      <div class="role-tabs">
        <button
          v-for="role in roles"
          :key="role.key"
          :class="['role-tab-button', { active: activeRole === role.key }]"
          @click="handleRoleChange(role.key)"
        >
          {{ role.label }}
        </button>
      </div>
    </div>

    <!-- 数据表格 -->
    <div class="table-container">
      <table>
        <thead>
          <tr>
            <th class="checkbox-cell">
              <input 
                type="checkbox" 
                v-model="allChecked"
                @change="handleCheckAll"
              />
            </th>
            <th>流程ID</th>
            <th>应用系统名</th>
            <th>状态</th>
            <th>名称</th>
            <th>类型</th>
          </tr>
        </thead>
        <tbody>
          <template v-if="currentData.length > 0">
            <tr v-for="item in currentData" :key="item.id">
              <td class="checkbox-cell">
                <input 
                  type="checkbox" 
                  v-model="checkedRows"
                  :value="item.id"
                />
              </td>
              <td>
                <span class="process-id">{{ item.processId }}</span>
              </td>
              <td>{{ item.systemName }}</td>
              <td>
                <span :class="['status-badge', getStatusClass(item.status)]">
                  {{ item.statusText }}
                </span>
              </td>
              <td>{{ item.name }}</td>
              <td>{{ item.type || '-' }}</td>
            </tr>
          </template>
          <template v-else>
            <tr>
              <td colspan="6" class="empty-state">
                表单无数据存在！
              </td>
            </tr>
          </template>
        </tbody>
      </table>

      <!-- 分页区域 -->
      <div class="pagination">
        <div class="pagination-left">
          <select v-model="pageSize" class="page-size-select">
            <option :value="10">10</option>
            <option :value="20">20</option>
            <option :value="50">50</option>
          </select>
          <span class="pagination-info">
            {{ paginationInfo }}
          </span>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, watch } from 'vue';

// 定义角色类型
interface Role {
  label: string;
  key: string;
}

// 定义数据项类型
interface DataItem {
  id: string;
  processId: string;
  systemName: string;
  status: string;
  statusText: string;
  name: string;
  type?: string;
}

// 角色列表
const roles = ref<Role[]>([
  { label: '平台管理员', key: 'platform' },
  { label: '安全领导', key: 'security' },
  { label: '系线领导', key: 'department' },
  { label: '审核员', key: 'auditor' },
  { label: '属主', key: 'owner' }
]);

// 当前选中的角色
const activeRole = ref('platform');

// 复选框相关
const checkedRows = ref<string[]>([]);
const allChecked = ref(false);

// 分页相关
const pageSize = ref(10);
const currentPage = ref(1);

// 模拟数据
const mockData: Record<string, DataItem[]> = {
  platform: [
    {
      id: '1',
      processId: 'VSM-J0000078',
      systemName: '人力资源系统',
      status: 'reviewing',
      statusText: '审核中',
      name: '安全检测',
      type: '安全检测'
    },
    {
      id: '2',
      processId: 'VSM-F0000204',
      systemName: '数据分发系统',
      status: 'rechecking',
      statusText: '复核中',
      name: '一般处理流程',
      type: '一般处理流程'
    },
    {
      id: '3',
      processId: 'VSM-J0000077',
      systemName: '漏洞管理平台',
      status: 'testing',
      statusText: '待测试',
      name: '安全检测',
      type: '安全检测'
    },
    {
      id: '4',
      processId: 'VSM-F0000196',
      systemName: '漏洞管理平台',
      status: 'rechecking',
      statusText: '复核中',
      name: '一般处理流程',
      type: '一般处理流程'
    }
  ],
  security: [],
  department: [],
  auditor: [],
  owner: []
};

// 当前显示的数据
const currentData = computed(() => {
  return mockData[activeRole.value] || [];
});

// 分页信息
const paginationInfo = computed(() => {
  const total = currentData.value.length;
  if (total === 0) {
    return '0 - 0';
  }
  const start = (currentPage.value - 1) * pageSize.value + 1;
  const end = Math.min(currentPage.value * pageSize.value, total);
  return `${start} - ${end} / ${total}`;
});

// 处理角色切换
const handleRoleChange = (roleKey: string) => {
  activeRole.value = roleKey;
  checkedRows.value = [];
  allChecked.value = false;
  currentPage.value = 1;
  
  // 在实际项目中，这里应该调用API获取数据
  // fetchData(roleKey);
};

// 处理全选
const handleCheckAll = () => {
  if (allChecked.value) {
    checkedRows.value = currentData.value.map(item => item.id);
  } else {
    checkedRows.value = [];
  }
};

// 获取状态样式类
const getStatusClass = (status: string) => {
  const statusMap: Record<string, string> = {
    reviewing: 'status-reviewing',
    rechecking: 'status-rechecking',
    testing: 'status-testing'
  };
  return statusMap[status] || '';
};

// 监听选中项变化，更新全选状态
watch(checkedRows, (newVal) => {
  if (currentData.value.length > 0) {
    allChecked.value = newVal.length === currentData.value.length;
  }
});

// 在实际项目中使用的API调用示例（注释）
/*
import { getTaskList } from '@/api/task';

const fetchData = async (roleKey: string) => {
  try {
    const res = await getTaskList({
      role: roleKey,
      page: currentPage.value,
      pageSize: pageSize.value
    });
    // 更新数据
  } catch (error) {
    console.error('获取数据失败:', error);
  }
};
*/
</script>

<style scoped>
.role-selector-container {
  padding: 16px;
  background-color: #f5f5f5;
  min-height: 100vh;
}

.page-header {
  margin-bottom: 20px;
}

.page-header h2 {
  font-size: 18px;
  color: #333;
  font-weight: 500;
  margin: 0;
}

.role-tabs-wrapper {
  margin-bottom: 20px;
}

.role-tabs {
  display: inline-flex;
  background: white;
  padding: 4px;
  border-radius: 8px;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  gap: 2px;
}

.role-tab-button {
  padding: 8px 20px;
  border: 1px solid transparent;
  background: white;
  color: #666;
  font-size: 14px;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 400;
  outline: none;
}

.role-tab-button:hover:not(.active) {
  background-color: #f0f0f0;
  color: #333;
}

.role-tab-button.active {
  background-color: #e6f4ff;
  color: #1677ff;
  border-color: #91caff;
  font-weight: 500;
}

.table-container {
  background: white;
  border-radius: 8px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

table {
  width: 100%;
  border-collapse: collapse;
}

thead {
  background-color: #fafafa;
  border-bottom: 1px solid #f0f0f0;
}

th {
  padding: 12px 16px;
  text-align: left;
  font-weight: 500;
  color: #333;
  font-size: 14px;
}

tbody tr {
  border-bottom: 1px solid #f0f0f0;
  transition: background-color 0.2s;
}

tbody tr:hover {
  background-color: #fafafa;
}

tbody tr:last-child {
  border-bottom: none;
}

td {
  padding: 12px 16px;
  font-size: 14px;
  color: #666;
}

.checkbox-cell {
  width: 50px;
}

input[type="checkbox"] {
  width: 16px;
  height: 16px;
  cursor: pointer;
}

.process-id {
  color: #1677ff;
  font-weight: 500;
  cursor: pointer;
}

.process-id:hover {
  text-decoration: underline;
}

.status-badge {
  display: inline-block;
  padding: 2px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 400;
}

.status-reviewing {
  background-color: #fff7e6;
  color: #d46b08;
}

.status-rechecking {
  background-color: #fff1f0;
  color: #cf1322;
}

.status-testing {
  background-color: #f6ffed;
  color: #52c41a;
}

.empty-state {
  text-align: center;
  padding: 60px 20px;
  color: #999;
  font-size: 14px;
}

.pagination {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 16px;
  border-top: 1px solid #f0f0f0;
  background-color: #fafafa;
}

.pagination-left {
  display: flex;
  align-items: center;
  gap: 10px;
}

.page-size-select {
  padding: 4px 8px;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  font-size: 14px;
  outline: none;
  background: white;
  cursor: pointer;
}

.page-size-select:hover {
  border-color: #40a9ff;
}

.page-size-select:focus {
  border-color: #40a9ff;
  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);
}

.pagination-info {
  color: #666;
  font-size: 14px;
}

/* 适配Vben Admin主题 */
:deep(.vben-basic-table) {
  .ant-table-wrapper {
    border-radius: 8px;
  }
}
</style>