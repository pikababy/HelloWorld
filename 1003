<template>
  <div class="vulnerability-management">
    <!-- 管理员信息 -->
    <div class="admin-info">
      <span>平台管理员：caohujuan/Cao Hujuan (曹慧娟)</span>
      <span style="margin-left: 100px;">属主：wangxiaojia/Wang Xiaojia (王筱嘉)</span>
    </div>

    <!-- 关联漏洞列表 -->
    <div class="vulnerability-list">
      <h3>关联漏洞列表</h3>
      
      <a-table 
        :columns="columns" 
        :data-source="dataSource" 
        :pagination="pagination"
        :loading="loading"
        row-key="id"
      >
        <!-- 漏洞名称列 -->
        <template #bodyCell="{ column, record }">
          <template v-if="column.key === 'vulnerabilityName'">
            <span>{{ record.vulnerabilityName }}</span>
          </template>
          
          <!-- 主机IP列 -->
          <template v-else-if="column.key === 'hostIp'">
            <span>{{ record.hostIp }}</span>
          </template>
          
          <!-- 级别列 -->
          <template v-else-if="column.key === 'level'">
            <a-tag :color="getLevelColor(record.level)">
              {{ record.level }}
            </a-tag>
          </template>
          
          <!-- 漏洞状态列 -->
          <template v-else-if="column.key === 'status'">
            <a-tag :color="getStatusColor(record.status)">
              {{ record.status }}
            </a-tag>
          </template>
          
          <!-- 处理结果列 - 下拉框 -->
          <template v-else-if="column.key === 'processResult'">
            <a-select
              v-model:value="record.processResult"
              style="width: 150px"
              :loading="record.updating"
              @change="handleProcessResultChange(record)"
            >
              <a-select-option value="确认不涉及">确认不涉及</a-select-option>
              <a-select-option value="待处理">待处理</a-select-option>
              <a-select-option value="已处理">已处理</a-select-option>
              <a-select-option value="已忽略">已忽略</a-select-option>
              <a-select-option value="处理中">处理中</a-select-option>
            </a-select>
          </template>
          
          <!-- 操作列 -->
          <template v-else-if="column.key === 'action'">
            <a-button type="primary" size="small" @click="handleView(record)">
              查看
            </a-button>
          </template>
        </template>
      </a-table>
    </div>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted } from 'vue'
import { message } from 'ant-design-vue'

// 表格列定义
const columns = [
  {
    title: '漏洞名称',
    dataIndex: 'vulnerabilityName',
    key: 'vulnerabilityName',
    width: 200,
    sorter: true
  },
  {
    title: '主机IP',
    dataIndex: 'hostIp',
    key: 'hostIp',
    width: 120
  },
  {
    title: '级别',
    dataIndex: 'level',
    key: 'level',
    width: 80
  },
  {
    title: '漏洞状态',
    dataIndex: 'status',
    key: 'status',
    width: 100
  },
  {
    title: '处理结果',
    dataIndex: 'processResult',
    key: 'processResult',
    width: 180
  },
  {
    title: '操作',
    key: 'action',
    width: 100,
    fixed: 'right'
  }
]

// 表格数据
const dataSource = ref([
  {
    id: '1',
    vulnerabilityName: '01测试漏洞02250818',
    hostIp: '',
    level: '高危',
    status: '已处理',
    processResult: '确认不涉及',
    updating: false
  },
  {
    id: '2',
    vulnerabilityName: '02测试漏洞02250818',
    hostIp: '',
    level: '高危',
    status: '待处理',
    processResult: '待处理',
    updating: false
  }
])

// 分页配置
const pagination = reactive({
  current: 1,
  pageSize: 10,
  total: 2,
  showSizeChanger: true,
  showQuickJumper: true,
  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`,
  onChange: (page, pageSize) => {
    pagination.current = page
    pagination.pageSize = pageSize
    fetchData()
  }
})

// 加载状态
const loading = ref(false)

// 获取级别颜色
const getLevelColor = (level) => {
  const colorMap = {
    '高危': 'red',
    '中危': 'orange',
    '低危': 'blue',
    '信息': 'default'
  }
  return colorMap[level] || 'default'
}

// 获取状态颜色
const getStatusColor = (status) => {
  const colorMap = {
    '已处理': 'green',
    '待处理': 'red',
    '处理中': 'orange',
    '已忽略': 'default'
  }
  return colorMap[status] || 'default'
}

// 处理结果改变事件
const handleProcessResultChange = async (record) => {
  try {
    // 设置单行更新状态
    record.updating = true
    
    // 调用更新接口
    await updateProcessResult(record.id, record.processResult)
    
    // 刷新表格数据
    await fetchData()
    
    message.success('处理结果更新成功')
  } catch (error) {
    message.error('更新失败：' + (error.message || '未知错误'))
    // 失败时恢复原值（这里需要保存原值）
  } finally {
    record.updating = false
  }
}

// 查看详情
const handleView = (record) => {
  console.log('查看详情:', record)
  // 这里可以打开详情页面或模态框
}

// 更新处理结果的API调用
const updateProcessResult = async (id, processResult) => {
  // 模拟API调用
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      // 模拟API响应
      if (Math.random() > 0.1) { // 90%成功率
        resolve({ success: true })
      } else {
        reject(new Error('网络错误'))
      }
    }, 1000)
  })
  
  // 实际的API调用应该是这样的：
  // return await fetch('/api/vulnerability/update-process-result', {
  //   method: 'POST',
  //   headers: {
  //     'Content-Type': 'application/json'
  //   },
  //   body: JSON.stringify({
  //     id: id,
  //     processResult: processResult
  //   })
  // }).then(response => response.json())
}

// 获取表格数据
const fetchData = async () => {
  try {
    loading.value = true
    
    // 模拟API调用
    await new Promise(resolve => setTimeout(resolve, 500))
    
    // 实际的API调用应该是这样的：
    // const response = await fetch('/api/vulnerability/list?' + new URLSearchParams({
    //   page: pagination.current,
    //   pageSize: pagination.pageSize
    // }))
    // const data = await response.json()
    // dataSource.value = data.list
    // pagination.total = data.total
    
    console.log('数据刷新完成')
  } catch (error) {
    message.error('数据加载失败')
  } finally {
    loading.value = false
  }
}

// 组件挂载时获取数据
onMounted(() => {
  fetchData()
})
</script>

<style scoped>
.vulnerability-management {
  padding: 16px;
  background: #f0f2f5;
  min-height: 100vh;
}

.admin-info {
  background: white;
  padding: 12px 16px;
  margin-bottom: 16px;
  border-radius: 6px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  font-size: 14px;
  color: #666;
}

.vulnerability-list {
  background: white;
  padding: 16px;
  border-radius: 6px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.vulnerability-list h3 {
  margin: 0 0 16px 0;
  font-size: 16px;
  font-weight: 500;
  color: #333;
}

:deep(.ant-table-thead > tr > th) {
  background: #fafafa;
  font-weight: 500;
}

:deep(.ant-select-selector) {
  border-radius: 4px;
}

:deep(.ant-btn) {
  border-radius: 4px;
}
</style>