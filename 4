在直接访问页面前我需要设置当前的登陆信息（见图1和图2），token我可以写死在本地。但是我现在直接访问要联调的页面，接口报错（见图3，该接口在后端不存在，需要舍弃），我需要怎么改
根据您的截图，我看到 `getUserInfo` 接口返回 404，这个接口在后端不存在。您需要做以下修改：

## 1. 写死 Token

在 `src/utils/auth/index.ts` 中：

```typescript
// 写死 token（从你图1中的 Authorization 复制）
const FIXED_TOKEN = 'eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ5TElEem...'; // 使用你的完整token

export function getToken(): string {
  // 直接返回固定 token
  return FIXED_TOKEN;
}

export function setToken(token: string) {
  // 写死情况下可以留空
}
```

## 2. 跳过 getUserInfo 接口调用

找到调用 `getUserInfo` 的地方，通常在 `src/store/modules/user.ts` 中：

```typescript
// 找到 getUserInfoAction 方法
async getUserInfoAction(): Promise<UserInfo | null> {
  try {
    // 注释掉原来的接口调用
    // const userInfo = await getUserInfo();
    
    // 直接返回模拟的用户信息
    const userInfo = {
      userId: '1',
      username: 'test',
      realName: '测试用户',
      avatar: '',
      desc: '测试账号',
      homePath: '/dashboard',
      roles: [
        {
          roleName: 'Super Admin',
          value: 'super',
        },
      ],
    };
    
    this.setUserInfo(userInfo);
    return userInfo;
  } catch (error) {
    return null;
  }
}
```

## 3. 修改 API 配置

如果有 `src/api/sys/user.ts` 文件，注释掉不需要的接口：

```typescript
// 注释掉或删除 getUserInfo 接口
// export function getUserInfo() {
//   return defHttp.get({ url: Api.GetUserInfo });
// }

// 或者返回模拟数据
export function getUserInfo() {
  return Promise.resolve({
    userId: '1',
    username: 'test',
    realName: '测试用户',
    // ... 其他用户信息
  });
}
```

## 4. 修改路由守卫

在 `src/router/guard/permissionGuard.ts` 中简化权限验证：

```typescript
export function createPermissionGuard(router: Router) {
  const userStore = useUserStoreWithOut();
  const permissionStore = usePermissionStoreWithOut();

  router.beforeEach(async (to, from, next) => {
    // 设置固定 token
    if (!userStore.getToken) {
      userStore.setToken('your-fixed-token');
      
      // 设置模拟的用户信息
      userStore.setUserInfo({
        userId: '1',
        username: 'test',
        realName: '测试用户',
        homePath: '/dashboard',
        roles: [{ roleName: 'Super Admin', value: 'super' }],
      });
    }

    // 如果已经添加过动态路由，直接放行
    if (permissionStore.getIsDynamicAddedRoute) {
      next();
      return;
    }

    // 构建路由（如果需要）
    const routes = await permissionStore.buildRoutesAction();
    routes.forEach((route) => {
      router.addRoute(route as unknown as RouteRecordRaw);
    });
    
    permissionStore.setDynamicAddedRoute(true);
    
    next({ ...to, replace: true });
  });
}
```

## 5. 处理其他可能的初始化接口

检查是否还有其他初始化接口调用，比如：
- 获取权限列表
- 获取菜单列表
- 获取字典数据

在 `src/store/modules/permission.ts` 中：

```typescript
async buildRoutesAction(): Promise<AppRouteRecordRaw[]> {
  // 如果有获取菜单的接口调用，也注释掉
  // const menuList = await getMenuList();
  
  // 直接使用静态路由
  const routes = await import('@/router/routes/index');
  return routes.default;
}
```

## 6. 快速定位问题

如果还有其他接口报错，可以：

1. 在浏览器开发者工具的 Network 面板查看所有失败的请求
2. 全局搜索这些接口的调用位置（如搜索 `getUserInfo`）
3. 逐个注释或模拟这些接口

## 7. 临时解决方案

如果想快速跳过所有错误，可以在 axios 响应拦截器中添加：

```typescript
// src/utils/http/axios/index.ts
responseInterceptorsCatch: (error: any) => {
  // 开发环境下，404 错误不阻塞流程
  if (import.meta.env.DEV && error?.response?.status === 404) {
    console.warn('接口不存在:', error.config?.url);
    // 返回空数据，避免阻塞
    return Promise.resolve({ data: {} });
  }
  
  // 其他错误正常处理
  // ...原来的错误处理逻辑
}
```

这样修改后，您就可以直接访问要联调的页面，而不会被不存在的接口阻塞了。