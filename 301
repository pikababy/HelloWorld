// 原始数据
const rawData = {
    host: 226,      // 主机漏洞
    system: 36,     // 系统漏洞  
    app: 27,        // 应用组件漏洞
    network: 4      // 网络设备漏洞
};

// 计算总数
const total = Object.values(rawData).reduce((sum, value) => sum + value, 0);

// 数据归一化处理 - 确保总和为100%
function normalizeData(data, targetTotal = 100) {
    const currentTotal = Object.values(data).reduce((sum, value) => sum + value, 0);
    const normalized = {};
    
    Object.keys(data).forEach(key => {
        normalized[key] = (data[key] / currentTotal) * targetTotal;
    });
    
    return normalized;
}

// 获取归一化后的数据
const normalizedData = normalizeData(rawData);

// ECharts配置
const chartConfigs = [
    {
        id: 'hostChart',
        title: '主机漏洞',
        value: normalizedData.host,
        color: '#d32f2f'
    },
    {
        id: 'systemChart', 
        title: '系统漏洞',
        value: normalizedData.system,
        color: '#ff9800'
    },
    {
        id: 'appChart',
        title: '应用组件漏洞', 
        value: normalizedData.app,
        color: '#3f51b5'
    },
    {
        id: 'networkChart',
        title: '网络设备漏洞',
        value: normalizedData.network,
        color: '#4caf50'
    }
];

// 创建单个环形图的配置
function createRingChartOption(config) {
    return {
        title: {
            text: config.title,
            left: 'center',
            bottom: '10%',
            textStyle: {
                fontSize: 14,
                color: '#333'
            }
        },
        series: [{
            type: 'pie',
            radius: ['50%', '70%'],
            center: ['50%', '45%'],
            startAngle: 90,
            data: [
                {
                    value: config.value,
                    name: config.title,
                    itemStyle: {
                        color: config.color
                    },
                    label: {
                        show: true,
                        position: 'center',
                        fontSize: 20,
                        fontWeight: 'bold',
                        formatter: '{c}%'
                    }
                },
                {
                    value: 100 - config.value,
                    name: '其他',
                    itemStyle: {
                        color: '#f0f0f0'
                    },
                    label: {
                        show: false
                    },
                    tooltip: {
                        show: false
                    }
                }
            ],
            emphasis: {
                disabled: true
            }
        }],
        tooltip: {
            trigger: 'item',
            formatter: function(params) {
                if (params.name !== '其他') {
                    return `${params.name}: ${params.value.toFixed(1)}%<br/>原始数值: ${rawData[Object.keys(rawData)[chartConfigs.findIndex(c => c.title === params.name)]]}`;
                }
                return false;
            }
        }
    };
}

// 初始化所有图表
function initCharts() {
    chartConfigs.forEach(config => {
        const chartDom = document.getElementById(config.id);
        if (chartDom) {
            const myChart = echarts.init(chartDom);
            const option = createRingChartOption(config);
            myChart.setOption(option);
        }
    });
}

// 验证数据总和
function validateDataSum() {
    const sum = chartConfigs.reduce((total, config) => total + config.value, 0);
    console.log('四个环形图数据总和:', sum.toFixed(2) + '%');
    console.log('原始数据:', rawData);
    console.log('归一化数据:', normalizedData);
    
    // 显示每个图表的百分比
    chartConfigs.forEach(config => {
        console.log(`${config.title}: ${config.value.toFixed(1)}%`);
    });
}

// 动态更新数据的函数
function updateChartData(newData) {
    const newNormalizedData = normalizeData(newData);
    
    chartConfigs.forEach((config, index) => {
        const key = Object.keys(newData)[index];
        config.value = newNormalizedData[key];
        
        const chartDom = document.getElementById(config.id);
        if (chartDom) {
            const chart = echarts.getInstanceByDom(chartDom);
            if (chart) {
                const newOption = createRingChartOption(config);
                chart.setOption(newOption);
            }
        }
    });
    
    validateDataSum();
}

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', function() {
    initCharts();
    validateDataSum();
});

// 示例：模拟数据更新
setTimeout(() => {
    console.log('=== 更新数据示例 ===');
    updateChartData({
        host: 300,
        system: 50, 
        app: 40,
        network: 10
    });
}, 3000);